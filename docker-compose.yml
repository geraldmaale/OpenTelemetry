version: '3.4'

services:

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - "9411:9411"
  #     - "9412:9411"

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      # - "4317:4317"
      # - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9412:9411"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

  # grafana-agent:
  #   image: grafana/agent:latest
  #   container_name: grafana-agent
  #   restart: always
  #   volumes:
  #     - ./config/agent-config.yaml:/etc/agent-config.yaml
  #   entrypoint:
  #    - /bin/agent
  #    - -config.file=/etc/agent-config.yaml

  otel:
    image: otel/opentelemetry-collector-contrib-dev:latest
    container_name: otel
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./output:/etc/output:rw # Store the logs
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - zipkin
      - jaeger

  cadvisor:
    image: google/cadvisor:latest
    container_name: cAdvisor
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg

  seq:
    image: datalust/seq
    container_name: seq
    restart: always
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5342:80"
    volumes:
      - seq_vol:/data

  # elastic01:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
  #   container_name: elastic01
  #   restart: always    
  #   environment:
  #     - node.name=elastic01
  #     - discovery.type=single-node
  #     - cluster.name=elastic-cluster
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #     - xpack.monitoring.enabled=false
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elastic-data01:/usr/share/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  
  # kibana01:
  #   image: docker.elastic.co/kibana/kibana:8.4.3
  #   container_name: kibana01
  #   restart: always
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - "ELASTICSEARCH_URL=http://elastic01:9200"
  #     - "ELASTICSEARCH_HOSTS=http://elastic01:9200"  
  #   networks:
  #     - elasticnetwork 

  # weatherforecast:
  #   container_name: weatherforecast-app
  #   restart: unless-stopped
  #   build: 
  #     context: .
  #     dockerfile: DistributedTracing/Dockerfile
  #   ports:
  #     - "7000:80"
  #   environment:
  #     - "Jaeger:AgentHost=localhost"
  #     - "Jaeger:AgentPort=6831"
  #     - "Jaeger:Endpoint=jaeger:16686"
  #     - "Jaeger:UdpCompactThrift"
  #     - "Zipkin:Endpoint=zipkin:9411"
  #     - "Otlp:Endpoint=otel:4317"
  #     - "AspNetCoreInstrumentation:RecordException=true"
  #     - "SeqConfiguration:Uri=seq:5341"
  #     - "ElasticConfiguration:Uri=elastic01:9201"

volumes:
  prometheus-data:
  grafana-storage:
  seq_vol:
  elastic-data01:

networks:
  elasticnetwork:
    driver: bridge